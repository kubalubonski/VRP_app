@page
@model FormularzModel
@{
    ViewData["Title"] = "Formularz danych";
}
@if (Model.StatusMessage != null)
{
    @if (Model.StatusMessage == "Rozpoczęto przetwarzanie danych...")
    {
        <!-- Przetwarzanie obsługiwane przez pełnoekranowe okno -->
    }
    else if (Model.StatusMessage.Contains("Trwa") || Model.StatusMessage.Contains("✓"))
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle"></i> <strong>Status:</strong> @Model.StatusMessage
        </div>
    }
    else if (Model.StatusMessage.Contains("Przekroczono limit API"))
    {
        <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle"></i> <strong>Uwaga:</strong> @Model.StatusMessage
        </div>
    }
    else if (Model.StatusMessage.Contains("błąd") || Model.StatusMessage.Contains("Błąd"))
    {
        <div class="alert alert-danger">
            <i class="fas fa-times-circle"></i> <strong>Błąd:</strong> @Model.StatusMessage
        </div>
    }
    else
    {
        <div class="alert alert-info">@Model.StatusMessage</div>
    }
}

<h2 class="mb-4">Wprowadź dane do optymalizacji tras</h2>
<form method="post">
    <div class="mb-3">
        <label class="form-label">Wybierz trasę z folderu <b>wwwroot/trasy</b> lub wczytaj przykładową trasę</label>
        <div class="d-flex gap-2 align-items-end">
            <div>
                <select class="form-select" name="WybranaTrasa">
                    <option value="">-- wybierz trasę --</option>
                    @if (ViewData["Trasy"] is List<string> trasy)
                    {
                        foreach (var trasa in trasy)
                        {
                            <option value="@trasa">@trasa</option>
                        }
                    }
                </select>
            </div>
            <div>
                <button type="submit" asp-page-handler="LoadSelected" class="btn btn-info">Wczytaj wybraną trasę</button>
            </div>
            <div>
                <button type="submit" asp-page-handler="LoadSample" class="btn btn-outline-secondary">Wczytaj przykładową trasę</button>
            </div>
        </div>
    </div>
    <div class="mb-3">
        <label class="form-label">Ulica magazynu</label>
        <input type="text" class="form-control" name="UlicaMagazynu" value="@Model.UlicaMagazynu" placeholder="np. Przykładowa" />
    </div>
    <div class="mb-3">
        <label class="form-label">Numer magazynu</label>
        <input type="text" class="form-control" name="NumerMagazynu" value="@Model.NumerMagazynu" placeholder="np. 1A" />
    </div>
    <div class="mb-3">
        <label class="form-label">Miasto magazynu</label>
        <input type="text" class="form-control" name="MiastoMagazynu" value="@Model.MiastoMagazynu" placeholder="np. Warszawa" />
    </div>
    <div class="mb-3">
        <label class="form-label">Kod pocztowy magazynu</label>
        <input type="text" class="form-control" name="KodPocztowyMagazynu" value="@Model.KodPocztowyMagazynu" placeholder="np. 00-001" />
    </div>
    <div class="mb-3">
        <label for="liczbaPojazdow" class="form-label">Liczba pojazdów</label>
        <input type="number" class="form-control" id="liczbaPojazdow" name="LiczbaPojazdow" value="@Model.LiczbaPojazdow" />
    </div>
    <hr />
        <h4 class="mb-3">Punkty dostaw</h4>
        <div id="punktyDostaw">
            @if (Model.PunktyDostaw.Count == 0)
            {
                <div class="alert alert-info">Brak punktów dostaw. Dodaj pierwszy punkt.</div>
            }
            @for (int i = 0; i < Model.PunktyDostaw.Count; i++)
            {
                <div class="border rounded p-3 mb-4 bg-light">
                    <h5 class="mb-3">Punkt dostawy #@(i+1)</h5>
                    <div class="row mb-2">
                        <div class="col-md-6">
                            <label class="form-label">Ulica</label>
                            <input type="text" class="form-control" name="PunktyDostaw[@i].Ulica" value="@Model.PunktyDostaw[i].Ulica" placeholder="np. Przykładowa" />
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Numer</label>
                            <input type="text" class="form-control" name="PunktyDostaw[@i].Numer" value="@Model.PunktyDostaw[i].Numer" placeholder="np. 2B" />
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Miasto</label>
                            <input type="text" class="form-control" name="PunktyDostaw[@i].Miasto" value="@Model.PunktyDostaw[i].Miasto" placeholder="np. Kraków" />
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Kod pocztowy</label>
                            <input type="text" class="form-control" name="PunktyDostaw[@i].KodPocztowy" value="@Model.PunktyDostaw[i].KodPocztowy" placeholder="np. 30-002" />
                        </div>
                    </div>
                    <div class="row mb-2">
                        <div class="col-md-6">
                            <label class="form-label">Okno czasowe od</label>
                            <input type="time" class="form-control" name="PunktyDostaw[@i].OknoCzasoweOd" value="@Model.PunktyDostaw[i].OknoCzasoweOd" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Okno czasowe do</label>
                            <input type="time" class="form-control" name="PunktyDostaw[@i].OknoCzasoweDo" value="@Model.PunktyDostaw[i].OknoCzasoweDo" />
                        </div>
                    </div>
                    <div class="mt-2 text-end">
                        <button type="submit" name="remove" value="@i" class="btn btn-danger btn-sm">Usuń punkt</button>
                    </div>
                </div>
            }
        </div>
    <button type="submit" name="add" value="true" class="btn btn-secondary mb-3">Dodaj punkt dostawy</button>
    <br />
    <button type="submit" asp-page-handler="ExportCsv" class="btn btn-primary" id="workflowBtn">Przetwórz dane</button>
<div id="processingBox" style="display:none;position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(0,0,0,0.4);z-index:9999;">
    <div style="position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);background:#fff;padding:2rem 3rem;border-radius:1rem;box-shadow:0 0 20px #333;text-align:center;">
        <div class="spinner-border text-primary mb-3" role="status"></div>
        <div style="font-size:1.3rem;">Przetwarzanie danych w toku</div>
        <div id="processing-status-text" style="font-size:1.1rem;color:#333;margin-top:1rem;padding:0.8rem;background:#f8f9fa;border-radius:0.5rem;">
            Rozpoczynanie przetwarzania...
        </div>
        <div style="font-size:1rem;color:#555;margin-top:0.7rem;">Czas oczekiwania zależy od liczby punktów dostawy.<br />Im więcej punktów, tym dłużej może potrwać pobieranie danych z serwerów zewnętrznych.</div>
    </div>
</div>
</form>

<div class="mt-4">
    <a href="/czasy_scenariusze.csv" class="btn btn-outline-primary" download>Pobierz gotowe dane (CSV)</a>
    <div class="small text-muted mt-1">Możesz pobrać gotowy plik bez generowania. Zawsze pobierany jest najnowszy plik z systemu.</div>
</div>

@if (Model.StatusMessage == "Scenariusze czasowe wygenerowane.")
{
    <div class="alert alert-success mt-3">@Model.StatusMessage</div>
    <a href="/czasy_scenariusze.csv" class="btn btn-outline-success mt-2" download>Pobierz scenariusze czasowe (CSV)</a>
    <div class="small text-muted mt-1">Jeśli pobierasz plik wielokrotnie, przeglądarka może dodać (1), (2) itp. do nazwy. Zawsze pobierany jest najnowszy plik z systemu.</div>
}

<script>
let processingInterval;

function startProcessingMonitor() {
    processingInterval = setInterval(checkProcessingStatus, 2000);
    checkProcessingStatus();
}

function checkProcessingStatus() {
    fetch('?handler=ProcessingStatus')
        .then(response => response.json())
        .then(data => {
            const statusElement = document.getElementById('processing-status-text');
            if (!statusElement) return;
            
            const status = data.status;
            
            if (status.startsWith('COMPLETED:')) {
                statusElement.innerHTML = status.substring(10);
                clearInterval(processingInterval);
                setTimeout(() => {
                    window.location.href = '/Wynik';
                }, 3000);
            } else if (status.startsWith('ERROR:')) {
                statusElement.innerHTML = '❌ ' + status.substring(6);
                clearInterval(processingInterval);
                setTimeout(() => {
                    window.location.reload();
                }, 5000);
            } else {
                statusElement.innerHTML = status;
            }
        })
        .catch(error => {
            console.error('Błąd podczas sprawdzania statusu:', error);
        });
}

document.addEventListener('DOMContentLoaded', function() {
    const statusMessage = '@Model.StatusMessage';
    if (statusMessage && statusMessage.includes('Rozpocz')) {
        document.getElementById('processingBox').style.display = 'block';
        startProcessingMonitor();
    }
});
</script>
